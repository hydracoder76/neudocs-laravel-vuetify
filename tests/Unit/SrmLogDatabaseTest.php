<?php
/**
 * Created by PhpStorm.
 * User: mlawson
 * Date: 2019-03-21
 * Time: 12:55
 */

namespace Tests\Unit;

use Faker\Factory;
use Faker\Generator as Faker;
use Illuminate\Foundation\Testing\RefreshDatabase;
use NeubusSrm\Models\Auth\User;
use NeubusSrm\Models\Org\Project;
use NeubusSrm\Models\Util\SrmLog;
use Tests\TestCase;

/**
 * Class SrmLogDatabaseTest
 * @package Tests\Unit
 */
class SrmLogDatabaseTest extends TestCase
{

    use RefreshDatabase;
    /**
     * @var Faker
     */
    private static $faker;

    public function setUp() {
        parent::setUp(); // TODO: Change the autogenerated stub
        self::$faker = Factory::create();
    }

    public function testUserRelation() : void {
        $srmUser = factory(User::class)->create();
        $srmLog = factory(SrmLog::class, 5)->create([
            'user_id' => $srmUser->id
        ]);
        $this->assertDatabaseHas('srm_logs', ['user_id' => $srmLog->first()->user->id]);
        self::assertEquals(5, SrmLog::whereUserId($srmUser->id)->count());
    }

    public function testProjectRelation() : void {
        $srmProject = factory(Project::class)->create();
        $srmLog = factory(SrmLog::class, 4)->create([
            'project_id' => $srmProject->id
        ]);
        $this->assertDatabaseHas('srm_logs', ['project_id' => $srmLog->first()->project->id]);
        self::assertEquals(4, SrmLog::whereProjectId($srmProject->id)->count());
    }

    /**
     * @throws \Exception
     */
    public function testFullMultiUserRelation() : void {
        $srmUsers = factory(User::class, 10)->create();
        $srmLog = factory(SrmLog::class, 14)->create([
            'user_id' => self::$faker->randomElement($srmUsers)
        ]);
        self::assertEquals(14, SrmLog::all()->count());
        self::assertEquals(10, User::all()->count());
        foreach ($srmLog as $log) {
            $this->assertDatabaseHas('srm_logs', $log->toArray());
            $userFromLog = $log->user_id;
            self::assertEquals(1, User::whereId($userFromLog)->count());
            $relationalCondition = User::whereId($userFromLog)->exists()
                && User::whereId($log->user->id)->exists()
                && $userFromLog === $log->user->id;

            self::assertTrue($relationalCondition);
        }

    }

    public function testFullMultiProjectRelations() : void {
        $srmProjects = factory(Project::class, 8)->create();
        $srmLog = factory(SrmLog::class, 6)->create([
            'project_id' => self::$faker->randomElement($srmProjects)
        ]);
        self::assertEquals(8, Project::all()->count());
        self::assertEquals(6, SrmLog::all()->count());
        foreach ($srmLog as $log) {
            $this->assertDatabaseHas('srm_logs', $log->toArray());
            $projectFromLog = $log->project_id;
            self::assertEquals(1, Project::whereId($projectFromLog)->count());
            $relationalCondition = Project::whereId($projectFromLog)->exists()
                && Project::whereId($log->project->id)->exists()
                && $projectFromLog === $log->project->id;

            self::assertTrue($relationalCondition);
        }
    }

    /**
     * @expectedException \PDOException
     * @expectedExceptionMessageRegExp /srm_logs_level_check/
     */
    public function testInvalidLevelEnum() : void {
        // literally just checking for the exception
        factory(SrmLog::class)->create([
            'level' => 'bogus'
        ]);
    }


    public function testValidLevelEnum() : void {
        try {
            factory(SrmLog::class)->create([
                'level' => 'debug'
            ]);
            factory(SrmLog::class)->create([
                'level' => 'info'
            ]);
            factory(SrmLog::class)->create([
                'level' => 'warn'
            ]);
            factory(SrmLog::class)->create([
                'level' => 'error'
            ]);
            self::assertTrue(true);
        }
        catch (\PDOException $exception) {
            self::assertTrue(false, 'The given level is not valid');
        }
    }

    /**
     * @expectedException \PDOException
     * @expectedExceptionMessageRegExp /srm_logs_operation_check/
     */
    public function testInvalidOperationEnum() : void {
        factory(SrmLog::class)->create([
            'operation' => 'invalid'
        ]);
    }

    public function testValidOperationEnum() : void {
        try {
            factory(SrmLog::class)->create([
                'operation' => 'retrieve'
            ]);
            factory(SrmLog::class)->create([
                'operation' => 'create'
            ]);
            factory(SrmLog::class)->create([
                'operation' => 'update'
            ]);
            factory(SrmLog::class)->create([
                'operation' => 'delete'
            ]);
            self::assertTrue(true);
        }
        catch (\PDOException $exception) {
            self::assertTrue(false, 'The given level is not valid');
        }
    }
}
